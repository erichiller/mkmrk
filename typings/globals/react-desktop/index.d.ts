// Generated by typings
// Source: ../typings-react-desktop/src/button/windows/button.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';
	import { __NavPaneItemProps , __NavPaneItemState } from  'react-desktop-props';


	class Button extends React.Component<__NavPaneItemProps,__NavPaneItemState> {
		propTypes:
			colorPropTypes |
			themePropTypes | 
			{
				type: string
				push: boolean
				onClick: Function
			}

			contextTypes: {

			}

	}

}

// Generated by typings
// Source: ../typings-react-desktop/src/checkbox/windows/checkbox.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	export class Checkbox extends React.Component<React.HTMLAttributes,void> { }
}

// Generated by typings
// Source: ../typings-react-desktop/src/navPane/windows/item/item.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';
	import { __NavPaneItemProps , __NavPaneItemState } from 'react-desktop-props';

	class Item extends React.Component<__NavPaneItemProps,__NavPaneItemState> {
		constructor();
		componentWillReceiveProps(nextProps);
	}


	export { Item as NavPaneItem }
}

// Generated by typings
// Source: ../typings-react-desktop/src/navPane/windows/pane/pane.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';
	import { __NavPaneProps , __ElementsType } from 'react-desktop-props';

	export class Pane extends React.Component<__NavPaneProps,void> {
		constructor(props, ...any);
		propTypes: {
			items: __ElementsType
			canPaneToggle: boolean
			onPaneToggle: Function
			defaultIsPaneExpanded: boolean
			paneCompactedLength: string | number
			paneExpandedLength: string | number
		}
		defaultProps: {
			canPaneToggle: boolean
			defaultIsPaneExpanded: boolean
			paneCompactedLength: string | number
			paneExpandedLength: string | number
		}
		toggleOpen: Function;
		render(): JSX.Element;
		renderItems(): JSX.Element | JSX.Element[];
	}




}

// Generated by typings
// Source: ../typings-react-desktop/src/navPane/windows/navPane.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';
	import { __NavPaneProps } from 'react-desktop-props';

	export class NavPane extends React.Component<__NavPaneProps,void> {
		propTypes: __NavPaneProps
		contextTypes: themeContextTypes;
		render(): JSX.Element
		renderContent(): any
	}

}

// Generated by typings
// Source: ../typings-react-desktop/src/style/background/windows.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';
	
	type backgroundPropTypes = {
		background: string | boolean;
	}
	type backgroundContextTypes = {
		background: string | boolean;
	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/style/color/windows.d.ts
declare module 'react-desktop/windows' {

	type colorPropTypes = {
		color: string | boolean;
	}

	type colorContextType = string | boolean;

	type applyColorProps = ( props: props, context: context ) => { applydefaultProps(props: props,context: context, {color: string}) }

	/**
	 * @function ColorContext
	 * @param {boolean} preserveProperty
	 */
	function ColorContext(preserveProperty: boolean): ComposedComponent;


}

// Generated by typings
// Source: ../typings-react-desktop/src/style/theme/windows.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';

	type themePropTypes = {
		theme: string
	};

	type themeContextTypes = {
		theme: string
	}

	type props = {};
	type context = {};

	/**
	 * @function
	 * @return {props} applyProps.basic()
	 */
	interface applyThemeProps { ( props: props , context: context ): applydefaultProps }

	function ThemeContext(): ComposedComponent;

	class ComposedComponent extends React.Component<themePropTypes,void> {
		propTypes: themePropTypes;
		contextTypes: themeContextTypes;
		childContextTypes: themeContextTypes;

		getChildContext(): themePropTypes;
		/**
		 * @function render
		 * @returns {JSX.Element} | returns ComposedComponent
		 */
		render(): JSX.Element;
	}

}

// Generated by typings
// Source: ../typings-react-desktop/src/style/hidden.d.ts
declare module 'react-desktop/windows' {

	type hiddenPropTypes = { 
		hidden: boolean;
	};

	function removeHiddenProps(props: props): {string: any}

	function mapHiddenStyle(key: any, value: any): any;

	//function styleHelper(...options, hiddenPropTypes, mapHiddenStyle):
	class styleHelper {
		constructor(any,propTypes,mapStyleCallback,mapStylesCallback,mapProps) 

		doStyleHelper(WrappedComponent): JSX.Element;
	}


}

// Generated by typings
// Source: ../typings-react-desktop/src/text/windows/text.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';
	import { __TextProps } from 'react-desktop-props';

	class Text extends React.Component<__TextProps,void> { }

}

// Generated by typings
// Source: ../typings-react-desktop/src/titleBar/windows/controls/close.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	
	export class Close extends React.Component<any,any> {

		contextTypes:
			themeContextTypes &
			backgroundContextTypes;

		render(): JSX.Element;

	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/titleBar/windows/controls/controls.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';
	
	export class Controls extends React.Component<any,void>{
		propTypes: {
			onCloseClick: Function,
			onMinimizeClick: Function,
			onRestoreDownClick: Function,
			onMaximizeClick: Function
		}

		render(): JSX.Element;
	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/titleBar/windows/controls/maximize.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	
	export class Maxmimize extends React.Component<any,any> {

		contextTypes:
			themeContextTypes &
			backgroundContextTypes &
			{ isMaximized: boolean };

		render(): JSX.Element;

	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/titleBar/windows/controls/minimize.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	
	export class Minimize extends React.Component<any,any> {

		contextTypes:
			themeContextTypes &
			backgroundContextTypes;

		render(): JSX.Element;

	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/titleBar/windows/titleBar.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	import { __BasicProps } from 'react-desktop-props';

	/** START file: navPane/windows/navPane.js */
	
	type __TitleBarProps = 
		hiddenPropTypes &
		themePropTypes &
		colorPropTypes & 
		backgroundPropTypes & 
		{
			title: string,
			controls: boolean,
			isMaximized: boolean,
			onCloseClick: Function,
			onMinimizeClick: Function,
			onMaximizeClick: Function,
			onRestoreDownClick: Function
		}

	type __TitleBarChildContext = {
			isMaximized: boolean;
		}


	/** END file: navPane/windows/navPane.js */


	export class TitleBar extends React.Component<any,void> {

		propTypes: __TitleBarProps;

		childContextTypes: __TitleBarChildContext;

		contextTypes: themeContextTypes;

		getChildContext(): __TitleBarChildContext;



		

	}
	
}

// Generated by typings
// Source: ../typings-react-desktop/src/window/windows/window.d.ts
declare module 'react-desktop/windows' {
	import * as React from 'react';

	export class Window extends React.Component<any,any> {

		static propTypes: void

		static contextTypes: void

		filterChildren(): JSX.Element[]

		render(): JSX.Element

		

	}
}

// Generated by typings
// Source: ../typings-react-desktop/src/styleHelper.d.ts
declare module 'react-desktop/windows' {

	import * as React from 'react';

	/**
	 * @function applyProps.basic
	 * @param {props} props
	 * @param {context} context
	 * @param {Props.basic} Props.basic | set to { theme: 'light' } by default
	 * @return {props} finalProps;
	 */
	type applydefaultProps = ( props: props , context: context , defaultProps: props ) => props

	/**
	 * @function extractProps
	 * @return {[props,props]} finalProps,extractedProps
	 */
	function extractProps(props: props, proptypes: props): [props, props]

}

// Generated by typings
// Source: ../typings-react-desktop/index.d.ts
declare module "react-desktop-props" {
	
	import * as React from 'react';

	interface __TextProps extends __AlignedProps {
		hidden?: boolean;
		height?: number;

	}

	interface __BasicProps {
		color?: string;
		theme?: string;
	//	handleChange(event: any): void;
	}

	interface __AlignedProps extends __BasicProps {
		background?: string | boolean;
		verticalAlignment?: "top" | "center" | "bottom";
		padding?: string;
		margin?: string;
		horizontalAlignment?: "left" | "center" | "right";
	}

	type __ElementsType = string | JSX.Element | string[] | JSX.Element[];

	/** START file: navPane/windows/item/item.js */
	interface __NavPaneItemState {
		prevTitle: __ElementsType;
	}
	interface __NavPaneItemProps extends __AlignedProps {
		title?: __ElementsType
		icon?: __ElementsType
		push?: boolean;
		onSelect?: React.EventHandler<any>;
		selected?: boolean;
		paneTheme?: string;
	}
	/** END file: navPane/windows/item/item.js */

	/** START file: navPane/windows/navPane.js */
	export interface __NavPaneProps extends __BasicProps {
		canPaneToggle?: boolean;
		defaultIsPaneExpanded?: string;
		onPaneToggle?: React.EventHandler<any>;
		paneCompactedLength?: string | number;
		paneExpandedLength?: string | number;
		openLength: string | number;
		selected?: string;
		push: boolean;
	}
	/** END file: navPane/windows/navPane.js */


}
